
********************************************* 2017-10-30
>Agy: another solution is that I try to live with the 1 second delay. It is the official Template for Angular. They will fix it sooner.
And because it is the official template, I will have to accept Razor too, because they guys use it.
What I can do in the future, that I revise their Template, and if it is not slow, then I rewrite that part again.
>I have Araxis merged the current release and this:
https://github.com/aspnet/templating/tree/dev/src/Microsoft.DotNet.Web.Spa.ProjectTemplates/content/Angular-CSharp
templates and the CLI ones. Minor differences, but they didn't fix it yet.


>I can ask my question here: https://github.com/aspnet/JavaScriptServices/blob/dev/templates/WhereHaveTheTemplatesGone.md
"Where have all the SPA templates gone?" They are now in the ASP.NET templating repo. https://github.com/aspnet/templating
Ask why the official "dotnet new angular" sample is slow. (takes 1 second for the first 'Home' response)
>report the 1second slowness in GitHub as issue. They may comment it with an easy fix sooner than later.
https://github.com/aspnet/templating/tree/dev/src/Microsoft.DotNet.Web.Spa.ProjectTemplates/content/Angular-CSharp
>I did:
https://github.com/aspnet/JavaScriptServices/issues/1392
----------------------
Subject: Angular example template without any modification is so slow in production.

Why is the Angular example template without any modification so slow in production?

It takes about 1.06 sec to refresh http://localhost:5000/home on local server.
How can this be a Production quality example? 
1 second is too much. Half of the server admins wouldn't allow to use Angular.
I am using DotNetCore version 2.0.3 on Windows x64.
To reproduce: (just the basic, without any modifications):

"dotnet new angular"
"npm install"
"dotnet restore"
"dotnet run", which says: "Hosting environment: Production"

In Chrome browser, press F12 and go to Network. And Paste http://localhost:5000/home to URL field.
Then hit Refresh sporadically. For getting the "home" or "localhost" document which is 6KB the query time is:
1st Refresh: 2.5 seconds. // Fine. First time the preparations take some time.
Hit Refresh very quickly (in every 2-3 seconds): 45msec
Hit Refresh while waiting about 5 seconds between Refreshes: 1.06 sec

So, it is 1 second. With local webserver! Is it the best we can do?
Could you enlighten me why it is that slow or fix it please? 
Thanks.





>The only guy who fixed it is this:
https://github.com/emonney/QuickApp
>**!!!This is actually good. RazorView, and Webpack, and it loads in 100msec, much better than 1sec.
In Release, login.html loads in 17msec, vendor.css in 39ms after.
In release the webpack_hmr is loding after.
>Unfortunatelly, it is not a simple template. But it shows that it is possible to do something fast.
>Unfortunatelly, it uses the Views too.
And too difficult to find the difference between the basic official template and this.

**********************************************



******************
Even with Release, and Control-F5 starting, Browser JS console says:
Angular is running in the development mode. Call enableProdMode() to enable the production mode.
client.js:67 
[HMR] connected

After switching: "ASPNETCORE_ENVIRONMENT": "Production" from Development in launchsettings.json, it still says: Angular is in development mode.


But when I 
- switch: "ASPNETCORE_ENVIRONMENT": "Production"
- force enableProdMode() in boot.browser.ts by commenting things
- switching from IIS to Kestrel Profile
- and Publish a Release version to a folder
- run it from CMD with "dotnet SQLib.dll"
Then vendor.js is minified and size reduced; and it is downloaded in 12msec;
If starting with F5-debug from VS, size is reduced, but download times are 55-100msec instead of 12msec.


>Ok. I got it.
The only thing we have to modify is (maybe not, maybe it was only because it used the Cache, and used previous files)
- switch to Kestrel, It doesn't seem to work with IISExpress
- switch: "ASPNETCORE_ENVIRONMENT": "Production" from Development in Kestrel server (not the IIS).
that will enableProd mode.
After that:
	>Debug breakpoint in *.ts is no longer triggered 
	>JS console no longer says: "Angular is running in the development mode. Call enableProdMode() to enable the production mode."
	>vendor.css; vendor.js size doesn't change: 283KB, 190KB
	>home is reduced from 5.9KB to 5.5KB
	>main-client.js is reduced from 2.7MB to 470KB (a 6x reduction)
	>_webback_hmr (273Byte) is no longer downloaded, but content.min.css is downloaded from disk.
	>Download times are reduced from 227-280msec to 13msec for each. However, the first file, Home takes 1second!!!
>In Production:
	>Home takes 1second to download, but the others are only 13msec.
	>If Chrome Cache is not disabled, only Home will be taken from the server (1sec), but all the other (vendor.js, etc.) is coming from the local Cache.
	>But what is annoying, that even in production, even with a local webserver, downloading Home takes 1 sec. Why is it so long?
	>Trying with IIS or Kestrel: some thing: 1second. I have to check it on the server side what is the problem. Server should write more logs.
	
>Yes. Exactly the same thing. After Published to a folder and run in CMD.exe: JS console doesn't show AngularDevMode.	
>But funny enough. After publishing to a folder. and running directly from IDE by Control-F5, Angular is in Production mode. 
>What ruins it?
- After Publishing a Production to a local Folder, then Ctrl-F5 in VS is still good: minified.
- changing "ASPNETCORE_ENVIRONMENT": "Development" ruins it.
- changing back "ASPNETCORE_ENVIRONMENT": "Production" again doesn't fix it. Even though we restart Chrome and the VS.
Although all the files in g:\tem2\SQLab\src\WebServer\SQLab\bin\Release\netcoreapp2.0\.. is unchanged.
>So, something is not right, but it seems:
	- starting from VS, it always prefers to be Hot module (Debuggable, and instant changes are traversed to Browser).  (no matter that  only  enableProdMode(); is valid, all other lines are commented out in boot.browser.ts).
	So, the JS Browser client code is in ProdMode(), but the server is not. It still sends 2.7MB main-client.js
	- publishing to local folder and starting from that in CMD, it prefers to be Minified
>Maybe it is a bug in VS, and they will fix it later.
However, I tested and uncommenting Hot-module things in boot.browser.ts in Not necessary. We can leave the VS_template as it is.
It seems Publishing doesn't even publish launchsetting.json, so settings "ASPNETCORE_ENVIRONMENT": "Development" is still OK in the Published one.
As if, it seems the Publishing minifies the files, and sets up that 
"Angular is running in the development mode. Call enableProdMode() to enable the production mode." is no longer written to the JS console.
So, always publish before uploading to server.
Deploy.py should copy from the Published folder. (or maybe it should call Publish itself)
So, keep the LaunchSettings.json as Development. It will have no effect in the Published version.



*************************************************

Why is it so slow that Home takes 1seconds ??


**************************************	  
A simple TestController
http://localhost:52990/api/Test   gives fixed: ["value1","value2"] returns in 53msec first, 3msec later. So, the server is quick.


***********************************

Logging shows it:
      Request starting HTTP/1.1 GET http://localhost:5000/home
info: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]
      Executing action method SQLab.Controllers.HomeController.Index (SQLab) with arguments ((null)) - ModelState is Valid
info: Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor[1]
      Executing ViewResult, running view at path /Views/Home/Index.cshtml.
info: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]
      Executed action SQLab.Controllers.HomeController.Index (SQLab) in 1332.0962ms
info: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]
      Request finished in 1371.3183ms 200 text/html; charset=utf-8
So, it is clear it takes the server 1.3sec.
Very slow. The HomeController.cs is very slow.
Which is return View();, which is Home.index.cshtml, which is:
"<app asp-prerender-module="ClientApp/dist/main-server">Loading...</app>
<script src="~/dist/vendor.js" asp-append-version="true"></script>
@section scripts {     <script src="~/dist/main-client.js" asp-append-version="true"></script> }
"
So, this "<app asp-prerender-module="ClientApp/dist/main-server" is what it takes 1second to generate.


*********************************** With Loglevel = Trace, the most detailed.

 Request starting HTTP/1.1 GET http://localhost:5000/home
dbug: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[4]
      The request path /home does not match a supported file type
dbug: Microsoft.AspNetCore.Routing.RouteBase[1]
      Request successfully matched the route with name 'default' and template '{controller=Home}/{action=Index}/{id?}'.
dbug: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]
      Executing action SQLab.Controllers.HomeController.Index (SQLab)
info: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]
      Executing action method SQLab.Controllers.HomeController.Index (SQLab) with arguments ((null)) - ModelState is Valid
dbug: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]
      Executed action method SQLab.Controllers.HomeController.Index (SQLab), returned result Microsoft.AspNetCore.Mvc.ViewResult.
dbug: Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine[1]
      View lookup cache miss for view 'Index' in controller 'Home'.
dbug: Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine[3]
      Using precompiled view for '/Views/Home/Index.cshtml'.
dbug: Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor[2]
      The view 'Index' was found.
info: Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor[1]
      Executing ViewResult, running view at path /Views/Home/Index.cshtml.
dbug: Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine[1]
      View lookup cache miss for view '_Layout' in controller 'Home'.
dbug: Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine[3]
      Using precompiled view for '/Views/Shared/_Layout.cshtml'.
info: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]
      Executed action SQLab.Controllers.HomeController.Index (SQLab) in 1333.4147ms

//Using precompiled view for '/Views/Home/Index.cshtml'.
Half of the problem is the Razor maybe. It would be good to have an Angular example without Razor.
Anyway, that 'Home' is the only 'generated' thing on the server. The vendor.css and vendor.js is just ready, so that is not slow to give to the client.

>Compare it to HealthMonitor. First file comes in 370msec. Then many *.js files in the next 2seconds. Altogether it is about 2-2.5 seconds.
This one is better, only 1 second + a tiny more, but I hoped about 500msec.

>these guys complain about the same things. 3seconds load time at least.
https://stackoverflow.com/questions/40138334/angular2-slow-initial-page-load-caused-of-load-sequance
But that was Angular 2.

************************  

>I should try a more simpler Angular4 app, based on the example from the Angular site.
The VS example tries to use Razor, which is not necessary.

https://angular.io/guide/quickstart
This loads in 13msec, but it is Node.JS, not C# as server.


"ng serve --open --env=prod" runs it in production, which didn't work, but changing environment.ts worked.
Now Angular doesn't complain in JS console, but nothing changed: files are the same size in bytes, and
main.bundle.js is not mimified.


// Ultimately, I don't want slow Angular4 examples. It is better to change at the beginning.
So, let's do it without Razor. And I don't want the Bootstrap UI either.
Create a new small AspDotNetCore project, and do the examples from https://angular.io/guide/quickstart to make it less bloated.
>This doesn't work, because 
https://angular.io/guide/quickstart  uses NodeJS server, not DotNetCore server.


****************************************


- http://www.c-sharpcorner.com/article/getting-started-with-asp-net-core-and-angular-4-using-web-api/
I tried to reproduce it, but it didn't work. Maybe because it is DotNetCore1.1.

- https://github.com/MarkPieszak/aspnetcore-angular2-universal
This is the one in VS built-in. IT haz Razor View.
"The short-version is that we invoke that Node process (maybe that takes time), passing in our Request object & invoke the boot.server file, and we get back a nice object that we pass 
into .NETs ViewData object, and sprinkle through out our Views/Shared/_Layout.cshtml and /Views/Home/index.cshtml files!"
>Agy: so that is why it takes a while.

- How can I disable SSR (Server-side rendering)?
Simply comment out the logic within HomeController, and replace @Html.Raw(ViewData["SpaHtml"]) with just your applications root AppComponent tag ("app" in our case): <app></app>.
>Agy: because maybe I don't want server side rendering if that makes it slow.


Single page application (SPA) 


https://github.com/asadsahi/AspNetCoreSpa

https://damienbod.com/2017/09/12/getting-started-with-signalr-using-asp-net-core-and-angular/

  <TargetFramework>netcoreapp2.0</TargetFramework>

  
https://github.com/emonney/QuickApp
>**!!!This is actually good. RazorView, and Webpack, and it loads in 100msec, much better than 1sec.
In Release, login.html loads in 17msec, vendor.css in 39ms after.
In release the webpack_hmr is loding after.
>Unfortunatelly, it is not a simple template. But it shows that it is possible to do something fast.
>Unfortunatelly, it uses the Views too.


https://github.com/search?utf8=%E2%9C%93&q=angular+netcore&type=Repositories
https://github.com/RobertDyball/A2SPA
It is without webpack, so it downloads 70 files in 10 seconds. Uh. Slow.

https://github.com/search?o=desc&q=angular+netcore&s=updated&type=Repositories&utf8=%E2%9C%93

https://github.com/aspnet/JavaScriptServices

https://github.com/aspnet/JavaScriptServices
Option 1: Creating Angular/React/Redux applications from the command line (cross-platform)
In an empty directory, run (for example) dotnet new angular
>But this seems to be the same as with VS, so probably it will be slow too.
Albeit at least, I can ask them about the error.
Since this is the official framework.
>Yes, it is the same bad one: takes 1second to generate the 'home'.

I downloaded the latest ZIP from github, maybe it is better.
>But there is no ANgular in the webpack example.





https://dotnetcore.gaprogman.com/2017/04/20/dotnet-new-angular-single-page-application-setup-and-how-the-template-works/

>Commenting out this doesn't help in speed.
//app.UseWebpackDevMiddleware(new WebpackDevMiddlewareOptions
//{
//    HotModuleReplacement = true
//});


















