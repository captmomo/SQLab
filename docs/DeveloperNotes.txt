SQLab = Laboratory  (as the Alchemist)


********************** SQLab framework on Github Folder structure

SQLab:  (we may have only 1 website, and many Server programs, so Healthmonitor topic cannot aggregate)
/3rdParty
/docs
/src is this
	/Common
	/UICommon
	/Matlab		(things that are not C#)
	/Java
	/R
	/Server
		/HealthMonitor(Server)
		/Overmind(Server is not needed in the name) (market watcher, email sender for birthday, rent)
		/Crawlers
		/VBroker
	/Client  (all is Website based)
		/HealthMonitorClientFrontEndWebsite (because this should be in another serverFarm than the othe)
		/UserHelperWebsite (CurrentLeverageCalculator + OvermindClient+VBrokerClient+all other Clients)
	/Tools  (not really resident, always running server apps, only small exe tools needed for something)
	 
 ************************** How to install DotNetCore in Brief

-Do the installation exactly how it is set here on a brand new Linux 14.04: https://dotnet.github.io/getting-started/

-see the dotnet-nightly packages and version numbers (you want the biggest version number, that is the latest)
http://apt-mo.trafficmanager.net/repos/dotnet/pool/main/d/dotnet-nightly/

-see currently installed version number
dpkg -s dotnet-nightly		// The apt-get utilities are simply a front-end to the debian dpkg utility

- see the latest daily DotNetCore NuGet packages:
https://dotnet.myget.org/gallery/dotnet-core


*************************** Server topology
When the Linux based VBroker is ready, we will have 2 Linux servers:

1. Free 1GB Linux, Developer machine, so GUI is needed (Xubuntu again).
-Overmind.exe is there
-the real-time price service CAN be there (not necessarily) with a paper account of drCharmat/wife (gives real-time REAL prices. Demo account gives mockup price data, not real)
That realtime price data should be separated anyway from the TradingServer VirtualBroker, and that could go to a free Linux Nano instance.
the real-time price service should use a paper account of somebody (probably Wife), that gives real-time data.
-HealthMonitor.exe should not be there (in the long term. Temporarily, it is ok.)
-can be used for Dev, not production

2. A 2GB Linux, VBrokerAgent Server, Runs 2 or 3 IB Gateways + VBrokers.
>There can me many users: Charmat, Agy, Balazs, Laci, T, so many IBGateways are required
>2 IBGateways require: 2*320GB=640GB just itself. I tried to run 2 IBGateways on the 1GB Linux
and it virtually frozen. After 10 minutes inactivity (Out-of-memory exceptions I guess), one IBGateway crashed. Luckyliy.
Ony after the first IBGateway crashed, was there enough memory than the system revived. (if it doesn't crash, I cannot even soft-reboot the VM)
When the 2 IBGateway runs: at start the system consumes: 940MB of 991MB memory. (Overmind 100MB is not run in this case.)

******************

- Verbose tracing of dotnet.   (a useful command!!!)
"dotnet restore -v Debug"	// verbose
"dotnet restore --runtime win7-x64"   //DNXCore,Version=v5.0 (win7-x64)
"dotnet restore --runtime win7-x86"   //DNXCore,Version=v5.0 (win7-x86)
"dotnet restore --runtime ubuntu.14.04-x64" 


"dotnet -v run"		// verbose
dotnet run -f net45   //it works
dotnet run -f dnx451
dotnet run -f dnxcore50	// 

"dotnet compile"	// compile only the project (for the 2 runtimes)
"dotnet build"		// compile all the projects in the solution (for the 2 runtimes)



*****************************

- "'dotnet5.4' is library TFM (Target Framework), use dnxcore50 for App projects with "emitEntryPoint": true. "
- I should use 'net45' or 'net451' for non DotNetCore runtime, but VisualStudio will not run it.
VS2015 gives message :please make sure the Debug Runtime Current Runtive framework = dnx451. that matches the runtime in project.json.
So, I have to use dnx451 in Visual studio.




